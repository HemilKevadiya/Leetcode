//The same approach as previous 3Sum
//But, this time we need to store the closest sums at every point
//If a perfect match for the target is found then we just return that sum as the answer

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        int closest = nums[0] + nums[1] + nums[2];
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n - 2; i++){
            if(i > 0 && nums[i] == nums[i - 1]){
                continue;
            }
            int low = i + 1;
            int high = n - 1;
            while(low < high){
                int currSum = nums[i] + nums[low] + nums[high];
                if(currSum == target) return currSum;
                if(abs(target - currSum) < abs(target - closest)){
                    closest = currSum;
                }
                if(currSum < target){
                    ++low;
                }else{
                    --high;
                }
            }
        }
        return closest;
    }
};
