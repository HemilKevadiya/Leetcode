struct Node{
    int data;
    Node* next;
    
    Node(){
        next = NULL;
    }
    
    Node(int val){
        data = val;
        next = NULL;
    }
};

class MyLinkedList {
    struct Node* head;
    int size;
public:
    MyLinkedList() {
        head = NULL;
        size = 0;
    }
    
    int get(int index) {
        cout<<size<<" ";
        if(index>=size){
            return -1;
        }
        struct Node* temp = head;
        while(index--){
            temp = temp->next;
        }
        return temp->data;
    }
    
    void addAtHead(int val) {
        Node * newNode = new Node(val);
        newNode->next=head;
        head=newNode;
        size++;
    }
    
    void addAtTail(int val) {
        Node * newNode = new Node(val);
        Node* temp = head;
        if(temp==NULL){
            head = newNode;
            size++;
            return;
        }
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=newNode;
        size++;
    }
    
    void addAtIndex(int index, int val) {
        if(index>size){
            return;
        }
        int i=index-1;
        struct Node* temp = head;
        struct Node* newNode = new Node(val);
        if(index==0){
            newNode->next = head;
            head = newNode;
            size++;
            return;
        }
        while(i){
            temp = temp->next;
            i--;
        }
        newNode->next = temp->next;
        temp->next = newNode;
        size++;
    }
    
    void deleteAtIndex(int index) {
        if(index>=size){
            return;
        }
        int i=index-1;
        struct Node* temp = head;
        if(index==0){
            if(temp->next==NULL){
                head=NULL;
                size--;
                return;
            }
            head = temp->next;
            size--;
            return;
        }
        while(i){
            temp = temp->next;
            i--;
        }
        temp->next = temp->next->next;
        size--;
    }
};
