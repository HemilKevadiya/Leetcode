class Solution {
public:
    //Calculate each word's bitwise value
    //Then do an AND operation on these values pair by pair and if the AND is 0, product can be performed
    //Bitwise operations on characters can be performed like the below function
    //a-z 26 characters will lie in the 0th to 25th bit respectively
    //To calculate which bit they will have, we minus each character with 'a'
    int help(string s){
        int ans = 0; 
        for(int i = 0; i< s.length(); i++){
            ans |= 1 << (s[i] - 'a');
        }
        return ans;
    }
    int maxProduct(vector<string>& words) {
        int n = words.size();
        vector<int> bits;
        int maxProduct = INT_MIN;
        for(int i=0; i<words.size(); i++){
            bits.emplace_back(help(words[i]));
        }
        for(int i = 0; i< n-1; i++){
            for(int j = i+1; j< n; j++){
                if(!(bits[i] & bits[j])){
                    int temp = words[i].size() * words[j].size();
                    maxProduct = max(maxProduct, temp);
                }
            }
        }
        return max(maxProduct, 0);
    }
};
