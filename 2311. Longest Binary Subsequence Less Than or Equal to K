class Solution {
    int solve(string& s, int k, int idx, long long currSize, long long currSum, vector<vector<int>>& dp){
        if(idx < 0) return currSize;
        if(dp[idx][currSize] != -1) return dp[idx][currSize];
        int ans = 0;
        if(s[idx] == '1'){
            if(currSum + pow(2, currSize) <= k){
                int sum = currSum + (1 << currSize);
                ans = max(solve(s, k, idx - 1, currSize + 1, sum, dp),
                          solve(s, k, idx - 1, currSize, currSum, dp));
            }else{
                ans = solve(s, k, idx - 1, currSize, currSum, dp);
            }
        }else{
            ans = max(solve(s, k, idx - 1, currSize + 1, currSum, dp),
                      solve(s, k, idx - 1, currSize, currSum, dp));
        }
        return dp[idx][currSize] = ans;
    }
public:
    int longestSubsequence(string s, int k) {
        int n = s.length();
        vector<vector<int>> dp(n, vector<int> (n + 1, -1));
        return solve(s, k, n - 1, 0, 0, dp);
    }
};
