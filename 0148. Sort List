class Solution {
public:
    ListNode* findMid(ListNode* head){
        ListNode* ptr1 = head;
        ListNode* ptr2 = head -> next;
        while(ptr2 != NULL && ptr2 -> next != NULL){
            ptr1 = ptr1 -> next;
            ptr2 = ptr2 -> next -> next;
        }
        
        return ptr1;
    }
    
    ListNode* merge(ListNode* left, ListNode* right){
        if(left == NULL) return right;
        if(right == NULL) return left;
        
        //the Linked List where the merged and linked LL will be stored
        ListNode* ans = new ListNode(-1);
        ListNode* temp = ans;
        
        while(left != NULL && right != NULL){
            if(left -> val < right -> val){
                temp -> next = left;
                left = left -> next;
            }else{
                temp -> next = right;
                right = right -> next;
            }
            temp = temp -> next;
        }
        
        while(left != NULL){
            temp -> next = left;
            left = left -> next;
            temp = temp ->next;
        }
        
        while(right != NULL){
            temp -> next = right;
            right = right -> next;
            temp = temp ->next;
        }
        ans = ans -> next;
        return ans;
    }
    ListNode* sortList(ListNode* head) {
        //Base Case
        if(head -> NULL || head -> next == NULL){
            return head;
        }
        
        //Find Mid Node to divide linked list into two halves
        ListNode* mid = findMid(head);
        
        //Left list and Right list
        ListNode* left = head;
        ListNode* right = mid -> next;
        mid -> next = NULL;
        
        //Recursively Call the function till there is only one node or zero nodes
        left = sortList(left);
        right = sortList(right);
        
        ListNode* ans = merge(left, right);
        
        return ans;
    }
};
