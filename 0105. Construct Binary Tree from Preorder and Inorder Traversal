class Solution {
public:
    //Divide and Conquer Approach
    //Just keep dividing the Inorder array from the current tree's root
    int ele;
    TreeNode* solve(vector<int>& preOrder, vector<int>& inOrder, int low, int high){
        if(low > high) return NULL;
        //If we have reached the end of the preOrder array
        if(ele == preOrder.size()) return NULL;
        
        TreeNode* root = new TreeNode(preOrder[ele++]);
        //Find the current subTree's root in the inOrder array and divide it
        int idx = find(inOrder.begin(), inOrder.end(), root -> val) - inOrder.begin();
        root -> left = solve(preOrder, inOrder, low, idx - 1);
        root -> right = solve(preOrder, inOrder, idx + 1, high);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return solve(preorder, inorder, 0, preorder.size() - 1);
    }
};
