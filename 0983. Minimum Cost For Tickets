//Recursive Approach(Which was quite complicated to convert into DP)

int solve(vector<int>& days, vector<int>& costs, int i, int valid){
        if(i == days.size()) return 0;
        int one = 0, seven = 0, month = 0;
        if(days[i] < valid){
            one = solve(days, costs, i + 1, valid);
            seven = solve(days, costs, i + 1, valid);
            month = solve(days, costs, i + 1, valid);
        }else{
            one = costs[0] + solve(days, costs, i + 1, (days[i] + 1));
            seven = costs[1] + solve(days, costs, i + 1, (days[i] + 7));
            month = costs[2] + solve(days, costs, i + 1, (days[i] + 30));
        }
        return min({one, seven, month});
    }
    
class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        vector<int> dp(365 + 30 + 1);
        unordered_set<int> set(days.begin(), days.end());
        for(int i = 365; i >= 1; i--){
            if(set.find(i) == set.end()){
                dp[i] = dp[i + 1];
            }else{
                dp[i] = min({dp[i + 1] + costs[0], dp[i + 7] + costs[1], dp[i + 30] + costs[2]});                
            }
        }
        return dp[1];
    }
};
