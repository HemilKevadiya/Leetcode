//Similar to Matrix Chain multiplication
//But the dependencies are different for every balloons because if we choose to burst a balloon then the balloon needs to be somehow removed from the array
//So, we work in reverse order, we first decide which balloon to burst at the last and go up till the first balloon, by that the dependencies of every balloon will change
//For more explanation, striver

class Solution {
    int solve(int i, int j, vector<int>& nums, vector<vector<int>>& dp){
        if(i > j) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        int maxCoins = 0;
        
        for(int k = i; k <= j; k++){
            int coins = (nums[i - 1] * nums[k] * nums[j + 1]);
            coins += solve(i, k - 1, nums, dp) + solve(k + 1, j, nums, dp);
            maxCoins = max(maxCoins, coins);
        }
        return dp[i][j] = maxCoins;
    }
public:
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        vector<vector<int>> dp(n + 2, vector<int> (n + 2, 0));
        for(int i = n; i >= 1; i--){
            for(int j = 1; j <= n; j++){
                if(i > j) continue;
                int maxCoins = 0;
                for(int k = i; k <= j; k++){
                    int coins = (nums[i - 1] * nums[k] * nums[j + 1]);
                    coins += dp[i][k - 1] + dp[k + 1][j];
                    maxCoins = max(maxCoins, coins);
                }
                dp[i][j] = maxCoins;
            }
        }
        return dp[1][n];
    }
};
