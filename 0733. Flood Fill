class Solution {
public:
    void colors(vector<vector<int>>& image,int sr,int sc,int newColor,vector<vector<int>>& visited,int m,int n){
        //DFS Approach
        //First, all the adjacent cells that have the same color are visited and then they are marked with the new color in the end
        int i = sr, j = sc;
        if(i-1>=0 && image[i-1][j]==image[i][j] && visited[i-1][j]!=1){
            visited[i][j] = 1;
            colors(image,i-1,j,newColor,visited,m,n);
        }
        if(i+1<m && image[i+1][j]==image[i][j] && visited[i+1][j]!=1){
            visited[i][j] = 1;
            colors(image,i+1,j,newColor,visited,m,n);
        }
        if(j-1>=0 && image[i][j-1]==image[i][j] && visited[i][j-1]!=1){
            visited[i][j] = 1;
            colors(image,i,j-1,newColor,visited,m,n);
        }
        if(j+1<n && image[i][j+1]==image[i][j] && visited[i][j+1]!=1){
            visited[i][j] = 1;
            colors(image,i,j+1,newColor,visited,m,n);
        }
        image[i][j] = newColor;
        visited[i][j] = 1;
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int m = image.size();
        int n = image[0].size();
        vector<vector<int>> visited(m,vector<int> (n));
        colors(image,sr,sc,newColor,visited,m,n);
        return image;
    }
};
