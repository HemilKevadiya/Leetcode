class Solution {
public:
    //Map Approach
    
    vector<int> singleNumber(vector<int>& nums) {
        unordered_map<int,int> map;
        int i,n=nums.size();
        for(i=0;i<n;i++){
            map[nums[i]]++;
        }
        vector<int> celeb;
        for(auto j:map){
            if(celeb.size()==2){
                break;
            }
            if(j.second==1){
                celeb.push_back(j.first);
            }
        }
        return celeb;
    }
    
    //Binary Search
    
    vector<int> singleNumber(vector<int>& nums){
        sort(nums.begin(),nums.end());
        int n = nums.size(),i = 0;
        vector<int> pair;
        while(pair.size()!=2){
            int idx = upper_bound(nums.begin(),nums.end(),nums[i]) - nums.begin() - 1;
            if(idx==i) pair.push_back(nums[i]);
            else i++;
            i++;
        }
        return pair;
    }
};
