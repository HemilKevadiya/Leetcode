class Solution {
public:
    int rob(vector<int>& nums) {
        //we calculate the answers as per the logic of house robber using two arrays,
        //first will be excluding the first house and the second will be excluding the last house, as from the problem we can understand that first and last houses can't be together in the answer
        int n = nums.size();
        if(n==1) return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        vector<int> temp1,temp2;
        vector<int> dp1(n-1),dp2(n-1);
        for(int i=0;i<n;i++){
            if(i!=0) temp1.push_back(nums[i]);
            if(i!=n-1) temp2.push_back(nums[i]);
        }
      
        dp1[0] = temp1[0];
        for(int i=1;i<n-1;i++){
            int pick = temp1[i];
            if(i>1) pick+=dp1[i-2];
            int notPick = dp1[i-1];
            dp1[i] = max(pick,notPick);
        }
        
        int ans1 = dp1[n-2];
        dp2[0] = temp2[0];
        
        for(int i=1;i<n-1;i++){
            int pick = temp2[i];
            if(i>1) pick+=dp2[i-2];
            int notPick = dp2[i-1];
            dp2[i] = max(pick,notPick);
        }
        
        int ans2 = dp2[n-2];
        return max(ans1,ans2);
    }
};
