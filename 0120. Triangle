class Solution {
public:
    //Memoization Approach
    int solve(int i, int row, vector<vector<int>>& triangle, vector<vector<int>>& dp){
        if(row >= triangle.size()) return 0;
        
        if(dp[row][i] != -1) return dp[row][i];
        
        int bottom = triangle[row][i] + solve(i, row + 1, triangle, dp);
        int next = triangle[row][i] + solve(i + 1, row + 1, triangle, dp);
        
        return dp[row][i] = min(bottom, next);
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int> (n));
        //Tabulation
        for(int j = 0; j < n; j++){
            dp[n - 1][j] = triangle[n - 1][j];
        }
        
        for(int i = n - 2; i >= 0; i--){
            for(int j = i; j >= 0; j--){
                int bottom = triangle[i][j] + dp[i + 1][j];
                int left = triangle[i][j] + dp[i + 1][j + 1];
                dp[i][j] = min(bottom, left);
            }
        }
        return dp[0][0];
        // return solve(0, 0, triangle, dp);
    }
};
