bool comp(const string& a, const string& b){
        return a.size() > b.size();
}

//First sort the input vector by the sizes of the strings(longest to shortest)
//Then, check if a string is already there in the set or not
//The set will store all the prefixes of a string
//Ex. time -> time, ime, me, e

class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        sort(words.begin(), words.end(), comp);
        unordered_set<string> prefixes;
        int wordLen = 0;
        for(auto& j:words){
            if(prefixes.find(j) != prefixes.end()){
                continue;
            }
            wordLen += (j.length()) + 1;
            for(int i = 0; i < j.length(); i++){
                prefixes.insert(j.substr(i,j.length() - i));
            }
        }
        return wordLen;
    }
};
