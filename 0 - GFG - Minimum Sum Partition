class Solution{
    int subsetSum(int arr[], int n, int sum){
        vector<vector<bool>> dp((n + 1), vector<bool> (sum + 1));
        for(int i = 0; i < n + 1; i++){
            for(int j = 0; j < sum + 1; j++){
                if(i == 0 && j > 0){
                    dp[i][j] = false;
                }else if(j == 0){
                    dp[i][j] = true;
                }else if(arr[i - 1] <= j){
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
                }else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        
        vector<int> ans;
        for(int i = 0; i <= dp[n].size()/2; i++){
            if(dp[n][i]) ans.push_back(i);
        }
        int minSum = INT_MAX;
        for(int i = 0; i < ans.size(); i++){
            minSum = min(minSum, abs(sum - 2*ans[i])); 
        }
        
        return minSum;
    }
  public:
	int minDifference(int arr[], int n)  { 
	    int sum = 0;
	    for(int i = 0; i < n; i++) sum += arr[i];
	    return subsetSum(arr, n, sum);
	} 
};
