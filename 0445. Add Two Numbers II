//First, we get both the linked lists on the same size
//Then, we recusrsively keep calling the nexts of both the lists till we reach the last node
//Then, we sum up both the nodes and store it's result in the answer linked list at it's head(because we are doing it in reverse order), while also keeping track of the carry at each iteration
//After the whole thing is done, if there was a carry while summing the first nodes of the linked lists then a '1' valued node is added at the head of the linked list

class Solution {
public:
    int carry = 0;
    ListNode* ans = new ListNode(0);
    void help(ListNode* node1, ListNode* node2){
        if(node1 == NULL && node2 == NULL){
            return;
        }
        help(node1 -> next, node2 -> next);
        
        int sum = node1 -> val + node2 -> val + carry;
        if(sum >= 10){
            sum -= 10;
            carry = 1;
        }else{
            carry = 0;
        }
        ListNode* newNode = new ListNode(sum);
        newNode -> next = ans;
        ans = newNode;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int size1 = 0, size2 = 0;
        ListNode* temp = l1;
        while(temp != NULL){
            ++size1;
            temp = temp -> next;
        }
        temp = l2;
        while(temp != NULL){
            ++size2;
            temp = temp -> next;
        }
        if(size1 > size2){
            for(int i = 0; i < (size1 - size2); i++){
                ListNode* newNode = new ListNode(0);
                newNode -> next = l2;
                l2 = newNode;
            }
        }else if(size2 > size1){
            for(int i = 0; i < (size2 - size1); i++){
                ListNode* newNode = new ListNode(0);
                newNode -> next = l1;
                l1 = newNode;
            }
        }
        help(l1, l2);
        if(carry == 1){
            ListNode* newNode = new ListNode(1);
            newNode -> next = ans;
            ans = newNode;
        }
        temp = ans;
        while(temp -> next -> next != NULL){
            temp = temp -> next;
        }
        temp -> next = NULL;
        return ans;
    }
};
