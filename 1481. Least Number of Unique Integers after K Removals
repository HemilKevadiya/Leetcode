bool comp(const pair<int, int>& a, const pair<int, int>& b){
    return a.second < b.second;
}

//First, take all the numbers' frequencies and greedily keep deleting the elements which have the least frequency till k is 0
//First, take every unique element into account and then for every element deleted subtract the unique elements by 1
class Solution {
    vector<pair<int, int>> sortMap(unordered_map<int, int>& map){
        vector<pair<int, int>> valueSortedMap;
        for(auto j:map){
            valueSortedMap.push_back(j);
        }
        
        sort(valueSortedMap.begin(), valueSortedMap.end(), comp);
        
        return valueSortedMap;
    }
public:
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int, int> freqMap;
        int n = arr.size();
        for(int i = 0; i < n; i++){
            freqMap[arr[i]]++;
        }
        vector<pair<int, int>> sorted = sortMap(freqMap);
        int uniqueEles = sorted.size();
        for(int i = 0; i < sorted.size(); i++){
            if(k == 0) break;
            int currFreq = sorted[i].second;
            //Meaning an element can be completely deleted
            if(k >= currFreq){
                uniqueEles--;
                k -= currFreq;
            }
        }
        return uniqueEles;
    }
};
