class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        vector<int> diff;
        int n = gas.size();
        //If the total cost to travel at every station is greater than the amount of gas filled then no answer is possible
        if(accumulate(gas.begin(),gas.end(),0)<accumulate(cost.begin(),cost.end(),0)) return -1;
        int sum = 0;
        int ans , flag;
        //As there is only unique solution, if from any index the difference doesn't become negative then the answer is the index at which the sum first became positive
        for(int i=0;i<n;i++){
            sum+=(gas[i]-cost[i]);
            if(sum<0) {
                sum = 0;
                flag = 0;
            }
            else if(sum>=0 && flag!=1){
                ans = i;
                flag = 1;
            }
        }
        return ans;
    }
};
