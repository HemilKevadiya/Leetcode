class Solution {
    int solve(int i, int j1, int j2, int m, int n, vector<vector<int>>& grid, 
             vector<vector<vector<int>>>& dp){
        if(j1 < 0 || j2 < 0 || j1 >= n || j2 >= n){
            return 0;
        }
        if(i == m - 1){
            if(j1 == j2)
                return grid[i][j1];
            else
                return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
        int ans = -1e8;
        for(int diff1 = -1; diff1 <= 1; ++diff1){
            for(int diff2 = -1; diff2 <= 1; ++diff2){
                int value = 0;
                if(j1 == j2)
                    value = grid[i][j1];
                else
                    value = grid[i][j1] + grid[i][j2];
                
                value += solve(i + 1, j1 + diff1, j2 + diff2, m, n, grid, dp);
                ans = max(ans, value);
            }
        }
        return dp[i][j1][j2] = ans;
    }
public:
    int cherryPickup(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<vector<int>>> dp((m), vector<vector<int>> ((n), vector<int> (n, -1)));
        return solve(0, 0, n - 1, m, n, grid, dp);
    }
};
