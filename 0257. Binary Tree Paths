/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void allPaths(TreeNode* root,string& ans,vector<string>& BTpaths){
        if(root->left==NULL && root->right==NULL){
            BTpaths.push_back(ans);
            return;
        }
        if(root->left){
            string temp="->";
            temp+=to_string(root->left->val);
            ans+=temp;
            allPaths(root->left,ans,BTpaths);
            int n = temp.size();
            for(int i=0;i<n;i++) ans.pop_back(); //the number of characters that were inserted should be popped back after backtracking
        }
        if(root->right){
            string temp="->";
            temp+=to_string(root->right->val);
            ans+=temp;
            allPaths(root->right,ans,BTpaths);
            int n = temp.length();
            for(int i=0;i<n;i++) ans.pop_back();
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> BTpaths;
        string ans;
        ans+=(to_string(root->val)); //as the root will always be there in the path, we explicitly insert it
        allPaths(root,ans,BTpaths);
        return BTpaths;
    }
};
