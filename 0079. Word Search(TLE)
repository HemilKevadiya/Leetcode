class Solution {
public:
    bool searchString(int i,int j,vector<vector<char>>& board,int wordLen,string word,int ch,int rowLen,int colLen,vector<vector<int>>& visited){
        if(ch==wordLen) return true;
        //downward
        if(i+1<rowLen && board[i+1][j]==word[ch] && visited[i+1][j]!=1){
            cout<<word[ch]<<" "<<"1"<<endl;
            visited[i][j]=1;
            if(searchString(i+1,j,board,wordLen,word,ch+1,rowLen,colLen,visited)==true) return true;
            visited[i][j]=0;
        }
        //left
        if(j-1>=0 && board[i][j-1]==word[ch] && visited[i][j-1]!=1){
            cout<<word[ch]<<" "<<"2"<<endl;
            visited[i][j]=1;
            if(searchString(i,j-1,board,wordLen,word,ch+1,rowLen,colLen,visited)==true) return true;
            visited[i][j]=0;
        }
        //right
        if(j+1<colLen && board[i][j+1]==word[ch] && visited[i][j+1]!=1){
            cout<<word[ch]<<" "<<"3"<<endl;
            visited[i][j]=1;
            if(searchString(i,j+1,board,wordLen,word,ch+1,rowLen,colLen,visited)==true) return true;
            visited[i][j]=0;
        }
        //up
        if(i-1>=0 && board[i-1][j]==word[ch] && visited[i-1][j]!=1){
            cout<<word[ch]<<" "<<"4"<<endl;
            visited[i][j]=1;
            if(searchString(i-1,j,board,wordLen,word,ch+1,rowLen,colLen,visited)==true) return true;
            visited[i][j]=0;
        }
        return false;
    }
    bool firstChar(int i,int j,vector<vector<char>>& board,int wordLen,string word,int ch,int rowLen,int colLen,vector<vector<int>>& visited){
        if(j==colLen){
            i++;
            j=0;
        }
        if(i==rowLen) return false;
        if(word[ch]==board[i][j]){
            visited[i][j]=1;
            if(searchString(i,j,board,wordLen,word,ch+1,rowLen,colLen,visited)==true)
                return true;
            visited[i][j]=0;
        }
        if(firstChar(i,j+1,board,wordLen,word,ch,rowLen,colLen,visited)==true) return true;
        return false;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        unordered_set<char> boardOccur;
        unordered_set<char> wordOccur;
        int n = word.length();
        int a = board.size();
        int b = board[0].size();
        for(int i=0;i<a;i++){
            for(int j=0;j<b;j++){
                boardOccur.insert(board[i][j]);
            }
        }
        for(int i=0;i<n;i++){
            wordOccur.insert(word[i]);
        }
        if(boardOccur.size()<wordOccur.size()) return false;
        vector<vector<int>> visited(a,vector<int>(b));
        return firstChar(0,0,board,n,word,0,a,b,visited);
    }
};
