//We first get the LCS between the 2 strings, as the common characters don't need to be inserted twice in the answer string
//Then, go through the DP table and do the process similar to printing LCS but instead of only printing common characters, this time we print every character that we come across
//Ex. If we are choosing to go to the previous row in non - match situation then we first insert the character which will be left out
//And then in some cases, some characters of either string might be left out, to handle that we write 2 while loops for both the pointers

class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int m = str1.length();
        int n = str2.length();
        vector<vector<int>> dp((m + 1), vector<int>(n + 1));
        for(int i = 1; i < m + 1; i++){
            for(int j = 1; j < n + 1; j++){
                if(str1[i - 1] == str2[j - 1]){
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }else{
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        string ans;
        int i = m, j = n;
        while(i > 0 && j > 0){
            if(str1[i - 1] == str2[j - 1]){
                ans += str1[i - 1];
                --i; --j;
            }else{
                if(max(dp[i - 1][j], dp[i][j - 1]) == dp[i - 1][j]){
                    ans += str1[i - 1];
                    --i;
                }else{
                    ans += str2[j - 1];
                    --j;
                }
            }
        }
        while(i > 0){
            ans += str1[i - 1];
            --i;
        }
        while(j > 0){
            ans += str2[j - 1];
            --j;
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};
