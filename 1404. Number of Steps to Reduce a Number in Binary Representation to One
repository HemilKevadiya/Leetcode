class Solution {
public:
    string addition(string s){
        //Binary Addition with 1 is basically making every bit 0 till you find a 0 and then turn it to 1
        int i = s.length() - 1;
        while(s[i]!='0'){
            s[i] = '0';
            i--;
        }
        s[i] = '1';
        return s;
    }
    int numSteps(string s) {
        int steps = 0;
        s.insert(s.begin(),'0'); //The addition might overflow in some cases like this, Ex: 111 + 1 = 1000, To handle these type of cases
        while(s.length()!=1){
            if(s.length()==2 && s[0]=='0') break; //If the length is 2 and the first character is 0, because we inserted it to handle overflow then we have already got the answer
            if(s[s.length()-1]=='1'){
                //if the last bit is 1, it means the number is odd so addition is performed
                s = addition(s);
            }else{
                //else it is even and we do right shift, which basically discards the LSB
                s.pop_back();
            }
            steps++;
        }
        return steps;
    }
};
