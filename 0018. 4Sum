class Solution {
public:
    //Brute Force: 1080 ms
    //Optimal Approach using set: 746 ms
    //Optimal Approach without using set: 150 ms
    //Same Approach as 3sum but in this keep two pointers intact which will require 3 for loops TC being O(n^3)
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i = 0; i < n; i++){
            if(i > 0 && nums[i] == nums[i-1]) continue;
            for(int j = i+1; j < n; j++){
                if(j > i + 1 && nums[j] == nums[j-1]) continue;
                int left = j + 1, right = n-1;
                int sum = target - nums[i] - nums[j];
                while(left < right){
                    if(nums[left] + nums[right] == sum){
                        ans.push_back({nums[i],nums[j],nums[left],nums[right]});
                        ++left; --right;
                        while(left < right && nums[left] == nums[left - 1]) ++left;
                        while(left < right && nums[right] == nums[right + 1]) --right;
                    }else if(nums[left] + nums[right] < sum){
                        left++;
                    }else{
                        right--;
                    }
                }
            }
        }
        return ans;
    }
};
