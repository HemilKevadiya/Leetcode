class Solution {
public:
//simple subsequence finding algorithm with the conditions added in the base case
    vector<vector<int>> sums;
    void combos(int idx,vector<int> a,vector<int> ans,int k,int n){
        if(n==0 && ans.size()==k){
            sums.push_back(ans);
            return;
        }
        if(n<0 || idx==9){
            return;
        }
        ans.push_back(a[idx]);
        combos(idx+1,a,ans,k,n-a[idx]);
        ans.pop_back();
        combos(idx+1,a,ans,k,n);
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> a={1,2,3,4,5,6,7,8,9};
        vector<int> ans;
        combos(0,a,ans,k,n);
        return sums;
    }
};
