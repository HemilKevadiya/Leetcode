//We try out every possible ways to make s3 using s1 and s2 by trying out every characters of s1 and s2 alternatively with the characters of s3

class Solution {
    bool solve(string& s1, string& s2, string& s3, int i, int j, int k, int m, int n, vector<vector<int>>& dp){
        if(i == m){
            return s2.substr(j) == s3.substr(k);
        }
        
        if(j == n){
            return s1.substr(i) == s3.substr(k);
        }
        
        bool ans = false;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        if(s1[i] == s3[k] && solve(s1, s2, s3, i + 1, j, k + 1, m, n, dp) || 
           s2[j] == s3[k] && solve(s1, s2, s3, i, j + 1, k + 1, m, n, dp)){
               ans = true;
        }
        
        return dp[i][j] = ans;
    }
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.length();
        int n = s2.length();
        if(m + n != s3.length()) return false;
        vector<vector<int>> dp(m, vector<int> (n, -1));
        return solve(s1, s2, s3, 0, 0, 0, m, n, dp);
    }
};
