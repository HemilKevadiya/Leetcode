class Solution {
public:
    //Maintain a Frequency Map
    //If a pair is found and if both the elements have frequency greater than 0 then it is possible to make a pair
    //While the current element's frequency doesn't become 0, we keep finding pairs for that element
    bool canReorderDoubled(vector<int>& arr) {
        map<int,int> freqMap;
        for(auto j:arr) freqMap[j]++;
        for(auto j:freqMap){
            while(freqMap[j.first] > 0){
                int val;
                if(j.first%2 != 0) val = INT_MIN;
                else val = j.first/2;
                freqMap[j.first]--;
                if(freqMap[val] == 0 && freqMap[(j.first) * 2] == 0){
                    return false;
                }
                if(freqMap[val] > 0){
                    freqMap[val]--;
                }else if(freqMap[j.first * 2] > 0){
                    freqMap[j.first * 2]--;
                }
            }
        }
        return true;
    }
};
