class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return height(root)!=-1;
    }
    int height(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        int left_height = height(root->left); //to check the height of the left subtree
        if(left_height==-1) return -1; //if any of the node is unbalanced as they a -1 is returned, whole tree is unbalanced
        int right_height = height(root->right); //to check the height of the right subtree
        if(right_height==-1) return -1; 
        if(abs(left_height - right_height)>1) return -1; //if there is a height difference greater than 1, then we can say the tree is unabalanced
        return max(left_height,right_height)+1; //returns the height of a node(which is the max of left subree and right subtree plus one)
    }
};
