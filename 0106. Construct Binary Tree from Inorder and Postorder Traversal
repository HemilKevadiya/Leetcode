class Solution {
public:
    //The same approach as creating a tree from in and pre but, we first complete the right subtree first because preorder works in that way(L -> R -> ROOT)
    int ele;
    TreeNode* solve(vector<int>& postOrder, vector<int>& inOrder, int low, int high){
        if(low > high) return NULL;
        if(ele == postOrder.size()) return NULL;
        
        TreeNode* root = new TreeNode(postOrder[ele++]);
        int idx = find(inOrder.begin(), inOrder.end(), root -> val) - inOrder.begin();
        root -> right = solve(postOrder, inOrder, idx + 1, high);
        root -> left = solve(postOrder, inOrder, low, idx - 1);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        reverse(postorder.begin(), postorder.end());
        return solve(postorder, inorder, 0, postorder.size() - 1);
    }
};
