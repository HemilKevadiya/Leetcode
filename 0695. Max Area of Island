class Solution {
public:
    int totalIslands(vector<vector<int>>& grid,int m,int n){
        int currArea = 0;
        int maxArea = INT_MIN;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    currArea = 1;
                    grid[i][j] = 2;
                    island(grid,m,n,i,j,currArea);
                    maxArea = max(currArea,maxArea);
                }
            }
        }
        //if there was no island then the function should return 0,
        return max(maxArea,currArea);
    }
    //The current island's area will be processed in this function 
    void island(vector<vector<int>>& grid,int m,int n,int i,int j,int& currArea){
        if(i-1>=0 && grid[i-1][j]==1){
            grid[i-1][j] = 2;
            currArea++;
            island(grid,m,n,i-1,j,currArea);
        }
        if(i+1<m && grid[i+1][j]==1){
            grid[i+1][j] = 2;
            currArea++;
            island(grid,m,n,i+1,j,currArea);
        }
        if(j-1>=0 && grid[i][j-1]==1){
            grid[i][j-1] = 2;
            currArea++;
            island(grid,m,n,i,j-1,currArea);
        }
        if(j+1<n && grid[i][j+1]==1){
            grid[i][j+1] = 2;
            currArea++;
            island(grid,m,n,i,j+1,currArea);
        }
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        return totalIslands(grid,m,n);
    }
};
