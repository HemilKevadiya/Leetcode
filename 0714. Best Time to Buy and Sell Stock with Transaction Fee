//Same thing as buy and sell stock II, but just subtract the transaction fee either when you are buying or when you are selling

class Solution {
    //Recursion + Memoization
    
    int solve(vector<int>& prices, int fee, int i, bool stock, int n, 
              vector<vector<int>>& dp){
        if(i == n){
            return 0;
        }
        
        if(dp[i][stock] != -1) return dp[i][stock];
        int profit = 0;
        if(!stock){
            profit = max(-prices[i] + solve(prices, fee, i + 1, true, n, dp),
                                              solve(prices, fee, i + 1, false, n, dp));
        }else{
            profit = max((prices[i] - fee) + solve(prices, fee, i + 1, false, n, dp),
                                     solve(prices, fee, i + 1, true, n, dp));
        }
        return dp[i][stock] = profit;
    }
public:
    //Tabulation
    
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int> (2, -1));
        
        dp[n][0] = dp[n][1] = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j < 2; j++){
                int profit;
                if(!j){
                    profit = max((-prices[i] - fee) + dp[i + 1][1], dp[i + 1][0]);
                }else{
                    profit = max(prices[i] + dp[i + 1][0], dp[i + 1][1]);
                }
                dp[i][j] = profit;
            }
        }
        return dp[0][0];
    }
    
    //Tabulation with space optimization
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<int> next(2), curr(2);
        
        next[0] = next[1] = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j < 2; j++){
                int profit;
                if(!j){
                    profit = max((-prices[i] - fee) + next[1], next[0]);
                }else{
                    profit = max(prices[i] + next[0], next[1]);
                }
                curr[j] = profit;
            }
            next = curr;
        }
        return next[0];
    }
};
