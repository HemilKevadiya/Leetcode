//For Explanation, watch striver

class Solution {
    bool solve(string& s, string& p, int i, int j, vector<vector<int>>& dp){
        if(i < 0 && j < 0){
            return true;
        }
        if(j < 0) return false;
        if(i < 0){
            for(int k = 0; k <= j; k++){
                if(p[k] != '*'){
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j] != -1) return dp[i][j];
        
        if(s[i] == p[j] || p[j] == '?'){
            return dp[i][j] = solve(s, p, i - 1, j - 1, dp);
        }
        else if(p[j] == '*'){
            return dp[i][j] = solve(s, p, i - 1, j, dp) || solve(s, p, i, j - 1, dp);
        }
        else{
            return false;
        }
    }
public:
    bool isMatch(string s, string p) {
        int m = s.length();
        int n = p.length();
        vector<vector<int>> dp(m + 1, vector<int> (n + 1, -1));
        
        dp[0][0] = true;
        
        for(int j = 1; j <= m; j++){
            dp[j][0] = false;
        }
        
        for(int i = 1; i <= n; i++){
            if(p[i - 1] != '*'){
                dp[0][i] = false;
            }else{
                dp[0][i] = dp[0][i - 1] & true;
            }
        }
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(s[i - 1] == p[j - 1] || p[j - 1] == '?'){
                    dp[i][j] = dp[i - 1][j - 1];
                }
                else if(p[j - 1] == '*'){
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                }
                else{
                    dp[i][j] = false;
                }
            }
        }
        return dp[m][n];
        // return solve(s, p, m - 1, n - 1, dp);
    }
};
