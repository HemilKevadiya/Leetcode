struct Node{
    int key, value;
    Node* next;
    
    Node(){
        next = NULL;
    }
    
    Node(int _key, int _value){
        key = _key;
        value = _value;
        next = NULL;
    }
};

class MyHashMap {
public:
    vector<Node*> HashTable;
    
    MyHashMap() {
        for(int i = 0; i < 1000; i++){
            Node* head = new Node(-50, -50);
            HashTable.push_back(head);
        }
    }
    
    int getHash(int key){
        return key % 1000;
    }
    
    void add(int hashVal, int _key, int _value){
        Node* newNode = new Node(_key, _value);
        Node* list = HashTable[hashVal];
        Node* temp = list;
        while(temp != NULL){
            if(temp -> key == _key){
                temp -> value = _value;
                HashTable[hashVal] = list;
                return;
            }
            temp = temp -> next;
        }
        temp = list;
        while(temp -> next != NULL){
            temp = temp -> next;
        }
        temp -> next = newNode;
        HashTable[hashVal] = list;
    }
    
    void put(int key, int value) {
        int hashVal = getHash(key);
        add(hashVal, key, value);
    }
    
    int get(int key) {
        int hashVal = getHash(key);
        Node* list = HashTable[hashVal];
        Node* temp = list;
        while(temp != NULL){
            if(temp -> key == key){
                return temp -> value;
            }
            temp = temp -> next;
        }
        return -1;
    }
    
    void remove(int key) {
        int hashVal = getHash(key);
        deleteFromLL(hashVal, key);
    }
    
    void deleteFromLL(int hashVal, int _key){
        Node* list = HashTable[hashVal];
        Node* temp = list;
        while(temp -> next != NULL && temp -> next -> key != _key){
            temp = temp -> next;
        }
        if(temp -> next == NULL) return;
        temp -> next = temp -> next -> next;
        HashTable[hashVal] = list;
        temp = list;
    }
};
