struct Node{
    Node* links[26];
    vector<int> index;
    
    bool contains(char ch){
        return links[ch - 'a'] != NULL;
    }
    
    void put(char ch, Node* node){
        links[ch - 'a'] = node;
    }
    
    Node* get(char ch){
        return links[ch - 'a'];
    }
};

class Trie{
    public:
    Node* root;
    Trie(){
        root = new Node();
    }
    
    void insert(string& word, int idx){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> contains(word[i])){
                node -> put(word[i], new Node());
            }
            node = node -> get(word[i]);
            node -> index.push_back(idx);
        }
    }
    
    vector<int> search(string& word){
        Node* node = root;
        bool flag = true;
        for(int i = 0; i < word.length(); i++){
            if(!node -> contains(word[i])){
                flag = false;
                break;
            }else{
                node = node -> get(word[i]);
            }
        }
        if(!flag){
            return {};
        }else{
            return node -> index;
        }
    }
};

class WordFilter {
    Trie pre, suf;
    map<pair<string, string>, int> findQuery;
public:
    WordFilter(vector<string>& words) {
        int n = words.size();
        for(int i = 0; i < n; i++){
            pre.insert(words[i], i);
            reverse(words[i].begin(), words[i].end());
            suf.insert(words[i], i);
        }
    }
    
    int f(string prefix, string suffix) {
        if(findQuery.find({prefix, suffix}) != findQuery.end()){
            return findQuery[{prefix, suffix}];
        }
        string temp = suffix;
        reverse(suffix.begin(), suffix.end());
        vector<int> p = pre.search(prefix);
        vector<int> s = suf.search(suffix);
        
        if(p.empty() || s.empty()){
            return findQuery[{prefix, temp}] = -1;
        }
        
        int i = p.size() - 1, j = s.size() - 1;
        while(i >= 0 && j >= 0){
            if(p[i] == s[j]) return findQuery[{prefix, temp}] = p[i];
            else if(p[i] > s[j]) i--;
            else j--;
        }
        return findQuery[{prefix, temp}] = -1;
    }
};
