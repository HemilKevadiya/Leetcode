struct Node{
    Node* links[26];
    bool flag = false;
    
    bool containsKey(char ch){
        return links[ch - 'a'] != NULL;
    }
    
    void put(char ch, Node* node){
        links[ch - 'a'] = node;
    }
    
    Node* get(char ch){
        return links[ch - 'a'];
    }
    
    void setEnd(){
        flag = true;
    }
    
    bool getEnd(){
        return flag;
    }
};

// ------Trie Solution(Gives TLE in LeetCode, but got submitted in GFG)------

class Trie{
    private:
    Node* root;
    
    public:
    
    Trie(){
        root = new Node();
    }
    
    void insert(string word){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> containsKey(word[i])){
                node -> put(word[i], new Node());
            }
            node = node -> get(word[i]);
        }
        node -> setEnd();
    }
    
    bool search(string word){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> containsKey(word[i])){
                return false;
            }else{
                node = node -> get(word[i]);
                if(i+1 != word.length() && node -> getEnd()){
                    string temp(word.begin() + (i+1), word.end());
                    if(search(temp)) return true;
                }
            }
        }
        if(!node -> getEnd()) return false;
        else return true;
    }
};

class Solution{
    public:
    // A : given string to search
    // B : vector of available strings
    
    int wordBreak(string s, vector<string> &wordDict) {
        Trie trie;
        for(auto j:wordDict){
            trie.insert(j);
        }
        return trie.search(s);
    }
};
