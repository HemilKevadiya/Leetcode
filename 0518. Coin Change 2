class Solution {
    int allPossible(int amount, vector<int>& coins, int idx, int n){
        if(amount == 0) return 1;
        if(amount < 0 || idx == n) return 0;
        
        int left = allPossible(amount - coins[idx], coins, idx, n);
        //Inclusion Case
        int right = allPossible(amount, coins, idx + 1, n);
        //Exclusion Case
        
        return left+right;
    }
public:
    //Basically, from the recursion approach, it is clear that for every subproblem, we have to sum up both the inclusion cases and exclusion cases
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp((n + 1), vector<int> (amount + 1));
        for(int i = 0; i < n + 1; i++){
            for(int j = 0; j < amount + 1; j++){
                if(i == 0 && j > 0){
                    dp[i][j] = 0;
                }else if(j == 0){
                    dp[i][j] = 1;
                }else if(coins[i - 1] <= j){
                    dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]];
                }else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][amount];
    }
};
