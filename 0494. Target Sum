class Solution {
public:
    //Recursive Approach(gets accepted but takes too long)
    // int countWays(vector<int>& nums, int target, int sum, int idx, int n, vector<vector<int>> mem){
    //     if(sum == target && idx == n) return 1;
    //     if(idx == n) return 0;
    //     int pos = countWays(nums,target,sum-nums[idx],idx+1,n); //we call the function by first subtracting the number
    //     int neg = countWays(nums,target,sum+nums[idx],idx+1,n); //then we call by adding the number
    //     return pos + neg;
    // }
    
    //This problem is the same as count number of subsets with a given diff.
    //Here, the two subsets will be
    //One subset will consist of every number that has '+' sign and the second subset will consist of every number that has '-' sign
    //So, taking overall, we can say that we just have to calculate all the subsets with the given difference(the difference here being target)
    //Then apply the same logic as that problem
    
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; ++i) sum += nums[i];
        
        if(sum < abs(target) || (target + sum) & 1) return 0;
        
        int newTarget = (sum + target)/2;
        vector<vector<int>> dp((n + 1), vector<int> (newTarget + 1));
        for(int i = 0; i < newTarget + 1; i++) dp[0][i] = 0;
        for(int j = 0; j < n + 1; j++) dp[j][0] = 1;
        
        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < newTarget + 1; j++){
                if(nums[i - 1] <= j){
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                }else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][newTarget];
        // return countWays(nums,target,0,0,nums.size());
    }
};
