class Solution {
public:
    //Recursive Approach
    int recursiveUniquePaths(vector<vector<int>>& obstacleGrid,int m,int n){
        if(m == 1 && n == 1) return 1;
        if(m == 0 || n == 0) return 0;
        if(obstacleGrid[m - 1][n - 1] == 1) return 0;
        int down = recursiveUniquePaths(obstacleGrid, m - 1,n);
        int right = recursiveUniquePaths(obstacleGrid, m, n- 1);
        
        return down+right;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        //Converted to DP(Tabulation)
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        // return recursiveUniquePaths(obstacleGrid,m,n);
        vector<vector<int>> dp(m, vector<int> (n));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1) 
                    dp[i][j] = 0;
                else if(i == 0 && j == 0)
                    dp[i][j] = 1;
                else{
                    int up = 0, left = 0;
                    
                    if(i > 0)
                        up = dp[i - 1][j];
                    if(j > 0)
                        left = dp[i][j - 1];
                    
                    dp[i][j] = up + left;
                }
            }
        }
        return dp[m-1][n-1];
    }
};
