class Solution {
public:
    //Recursive Approach
    int recursiveUniquePaths(vector<vector<int>>& obstacleGrid,int m,int n){
        if(m==1 && n==1) return 1;
        if(m==0 || n==0) return 0;
        if(obstacleGrid[m-1][n-1]==1) return 0;
        int down = recursiveUniquePaths(obstacleGrid,m-1,n);
        int right = recursiveUniquePaths(obstacleGrid,m,n-1);
        
        return down+right;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        //Converted to DP(Tabulation)
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        return recursiveUniquePaths(obstacleGrid,m,n);
        vector<vector<int>> dp(m,vector<int>(n));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0){
                    //if it's the first row and first column and there is an obstacle, it means there are no paths, so a 0 is assigned for every rows and columns
                    //If in a certain row or column, the path was blocked then it means there is no way the robot could have reached on that row or column, so if any 0 is encountered, the whole row or column gets a 0, meaning there is no path existing from there
                    if(j>0 && dp[i][j-1]==0) dp[i][j] = 0;
                    else if(obstacleGrid[i][j]==1) dp[i][j] = 0;
                    else dp[i][j] = 1;
                }else if(j==0){
                    if(i>0 && dp[i-1][j]==0) dp[i][j] = 0;
                    else if(obstacleGrid[i][j]==1) dp[i][j] = 0;
                    else dp[i][j] = 1;
                }
                else{
                    if(obstacleGrid[i][j]==1) dp[i][j] = 0;
                    else dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
};
