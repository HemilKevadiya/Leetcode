class Solution {
public:
    set<vector<int>> set;//as we have to include only unique permutattion, we use set
    void permutations(vector<int> nums,vector<int>& picked,vector<int>& ans,int n){
        if(ans.size()==n){
            set.insert(ans);
            return;
        }
        for(int i=0;i<n;i++){
            if(picked[i]!=1){//if the element is already in the permutation, don't include it again
                ans.push_back(nums[i]);
                picked[i]=1;
                permutations(nums,picked,ans,n);
                ans.pop_back();//we need to make another combination
                picked[i]=0;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        int n = nums.size();
        vector<int> picked(n);
        vector<int> ans;
        permutations(nums,picked,ans,n);
        vector<vector<int>> perms;
        for(auto j:set){ //to convert set into vector
            perms.push_back(j); //as every j will be a vector, j is pushed into the answer vector
        }
        return perms;
    }
};
