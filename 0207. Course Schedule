class Solution {
public:
    bool detectCycle(int node, vector<int>& visited, vector<int>& DFS, vector<vector<int>>& adjList){
        //Here, the DFS vector represents if it is visited in the current DFS call or not, if at any point we come to a node that is already visited in the current DFS call, we can say there is a cycle
        visited[node] = 1;
        DFS[node] = 1;
        //Basic DFS is performed
        for(auto it:adjList[node]){
            if(!visited[it]){
                if(detectCycle(it,visited,DFS,adjList)) return true;
            }else if(DFS[it]){
                return true;
            }
        }
        //after each call, we need to backtrack the DFS vector
        DFS[node] = 0;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& a) {
        //We need to detect if there is a cycle or not in this directed graph
        vector<vector<int>> adjList(numCourses);
        int n = a.size();
        //Convert all the edges into Adjacency List
        for(int i=0;i<n;i++){
            adjList[a[i][0]].push_back(a[i][1]);
        }
        vector<int> visited(numCourses);
        vector<int> DFS(numCourses);
        for(int i=0;i<numCourses;i++){
            if(!visited[i]){
                if(detectCycle(i,visited,DFS,adjList)) return false;
            }
        }
        return true;
    }
};
