//There are 4 choices on the grid, we can make a move if the number of moves is greater than 0, then for every out of boundary index, we increment our answer

class Solution {
    long long solve(int m, int n, int maxMove, int i, int j,                
                    vector<vector<vector<int>>>& dp){
        if(i < 0 || j < 0 || i >= m || j >= n){
            return 1;
        }
        
        if(dp[maxMove][i][j] != -1) return dp[maxMove][i][j];
        long long ans = 0;
        if(maxMove > 0){
            ans = solve(m, n, maxMove - 1, i - 1, j, dp) + 
                  solve(m, n, maxMove - 1, i + 1, j, dp) + 
                  solve(m, n, maxMove - 1, i, j - 1, dp) + 
                  solve(m, n, maxMove - 1, i, j + 1, dp);
        }
        return dp[maxMove][i][j] = ans % (int)(1e9 + 7);
    }
public:
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        vector<vector<vector<int>>> dp(maxMove + 1, vector<vector<int>> (m + 1, vector<int> (n + 1, -1)));
        return solve(m, n, maxMove, startRow, startColumn, dp);
    }
};
