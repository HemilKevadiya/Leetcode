class Solution {
public:
    //Greedy Approach
    //Store every elements' frequency in a max Heap
    //Keep subtracting the top frequency till the array has been reduced to half
    int minSetSize(vector<int>& arr) {
        unordered_map<int,int> freqMap;
        for(int i = 0; i < arr.size(); i++) freqMap[arr[i]]++;
        priority_queue<pair<int,int>> pq;
        for(auto j:freqMap){
            pq.push({j.second,j.first});
        }
        int n = arr.size(), count = 0;
        while(n > arr.size()/2){
            n -= pq.top().first;
            count++;
            pq.pop();
        }
        return count;
    }
};
