//Recursion(Backtracking)

class Solution {
public:
    vector<vector<int>> subs;
    void f(int i,vector<int> nums,vector<int> a,int n){
        if(i==n){ 
            subs.push_back(a);
            return;
        }
        a.push_back(nums[i]); //nums[i] is included
        f(i+1,nums,a,n); //call the function with the next index
        a.pop_back(); //nums[i] is not included
        f(i+1,nums,a,n);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<int> a;
        f(0,nums,a,n);
        return subs;
    }
};

//Bit Manipulation

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        //works on the pick/non-pick logic
        //the number of subsets in every array will be (2^n) -1
        //if n=3, we do a loop on 0 to 7 and then for each set bit in every number, the number in our input array which is on that index is inserted into the subset array
        int n = (1<<nums.size())-1;
        vector<vector<int>> ans;
        for(int i=0;i<=n;i++){
            vector<int> temp;
            for(int j=0;j<nums.size();j++){
                if(i&(1<<j)) temp.push_back(nums[j]);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
