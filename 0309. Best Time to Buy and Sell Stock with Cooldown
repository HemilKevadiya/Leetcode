//Just like buy and sell stock II, we have 4 options
//But here there is a cooldown attached, after selling a stock, we have to skip the next day and there will be an index jump of 2 instead of 1

class Solution {
    //Recursion + Memoization
    
    int solve(vector<int>& prices, bool stock, int i, int n, vector<vector<int>>& dp){
        if(i >= n){
            return 0;
        }
        
        if(dp[i][stock] != -1) return dp[i][stock];
        int profit = 0;
        if(!stock){
            profit = max(-prices[i] + solve(prices, true, i + 1, n, dp), 
                                      solve(prices, false, i + 1, n, dp));
        }else{
            profit = max(prices[i] + solve(prices, false, i + 2, n, dp),
                                     solve(prices, true, i + 1, n, dp));
        }
        return dp[i][stock] = profit;
    }
public:
    //Tabulation
    
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 2, vector<int> (2, 0));
        dp[n + 1][0] = dp[n + 1][1] = 0;
        
        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j < 2; j++){
                int profit;
                if(!j){
                    profit = max(-prices[i] + dp[i + 1][1], dp[i + 1][0]);
                }else{
                    profit = max(prices[i] + dp[i + 2][0], dp[i + 1][1]);
                }
                dp[i][j] = profit;
            }
        }
        return dp[0][0];
    }
};
