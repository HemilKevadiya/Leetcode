class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        vector<vector<int>> mergedIntervals;
        sort(intervals.begin(),intervals.end());
        vector<int> currPair = {intervals[0][0],intervals[0][1]};
        for(int i=0;i<n;i++){
            //if the left of the current interval lies in between the current pair we are traversing on, then the interval can be merged into the current interval
            //ex: consider current pair=0,3 and then the interval is 1,4; 1 lies in between 0 and 3, so it can be merged and then it will look like 0,4
            if(intervals[i][0]>=currPair[0] && intervals[i][0]<=currPair[1]){
                currPair[1] = max(intervals[i][1],currPair[1]);
            }else{
                //if the current interval and the current pair cannot be merged further, we push the final merged pair till this interval into the answer and assign a new current pair which will have the current interval
                mergedIntervals.push_back(currPair);
                currPair = {intervals[i][0],intervals[i][1]};
            }
        }
        mergedIntervals.push_back(currPair); //a pair will always be left off at the end, so we need to insert it
        return mergedIntervals;
    }
};
