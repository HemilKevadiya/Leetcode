class Solution {
public:
    bool isValid(vector<vector<char>> & board, int row, int col, char c) {
        for (int i = 0; i < 9; i++) {
            //we need to check for the element in its row,column and grid without checking itself
            if (i!=row && board[i][col] == c){ 
                return false;
            }
            if (i!=col && board[row][i] == c){ 
                return false;
            }
            if ((3*(row/3)+i/3)!=row && (3*(col/3)+i%3)!=col && board[3*(row/3)+i/3][3*(col/3)+i%3] == c){
                return false;
            }
        }
        return true;
    }
    bool solve(vector<vector<char>>& board){
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]!='.'){ //if there exists a number on the location we check the validity of the number
                    char c = board[i][j];
                    if(isValid(board,i,j,c)==false){ //if any of the number is not valid then the whole sudoku is not valid
                        return false;
                    }
                }
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        return solve(board);
    }
};
