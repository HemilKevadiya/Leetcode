class Solution {
public:
    void DFS(int& perimeter, vector<vector<int>>& visited,vector<vector<int>>& grid, int i, int j, int m, int n){
        if(visited[i][j]) return;
        visited[i][j] = 1;
        perimeter+=4; //Initially, for every cell perimeter is incremented by 4
        //Then for every connection, even if it is visited we visit it to decrement the perimeter by 1
        if(i-1>=0 && grid[i-1][j]==1){
            perimeter-=1;
            DFS(perimeter,visited,grid,i-1,j,m,n);
        }
        if(i+1<m && grid[i+1][j]==1){
            perimeter-=1;
            DFS(perimeter,visited,grid,i+1,j,m,n);
        }
        if(j-1>=0 && grid[i][j-1]==1){
            perimeter-=1;
            DFS(perimeter,visited,grid,i,j-1,m,n);
        }
        if(j+1<n && grid[i][j+1]==1){
            perimeter-=1;
            DFS(perimeter,visited,grid,i,j+1,m,n);
        }
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int perimeter = 0;
        vector<vector<int>> visited(m,vector<int> (n));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    DFS(perimeter,visited,grid,i,j,m,n);
                }
            }
        }
        return perimeter;
    }
};
