//for the new 2 functions, we maintain 2 diff variables with each trie
//One of them will store how many words have ended with this trie and the other one will store the total number of words which contained that character
//endsWith will be useful for count words ending with function and countPrefix will be useful for count words starting with function

struct Node{
    Node *links[26];
    int endsWith = 0;
    int countPrefix = 0;
    
    bool containsKey(char ch){
        return links[ch - 'a'] != NULL;
    }
    
    void put(char ch, Node* node){
        links[ch - 'a'] = node;
    }
    
    Node* get(char ch){
        return links[ch - 'a'];
    }
    
    void increaseEnd(){
        endsWith += 1;
    }
    
    void increaseCount(){
        countPrefix += 1;
    }
    
    void decreaseEnd(){
        endsWith -= 1;
    }
    
    void decreaseCount(){
        countPrefix -= 1;
    }
    
    int getEnd(){
        return endsWith;
    }
    
    int getCount(){
        return countPrefix;
    }
};

class Trie{
Node* root;
    public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> containsKey(word[i])){
                node -> put(word[i], new Node());
            }
            node = node -> get(word[i]);
            node -> increaseCount();
        }
        node -> increaseEnd();
    }

    int countWordsEqualTo(string &word){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> containsKey(word[i])){
                return 0;
            }
            node = node -> get(word[i]);
        }
        return node -> getEnd();
    }

    int countWordsStartingWith(string &word){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> containsKey(word[i])){
                return false;
            }
            node = node -> get(word[i]);
        }
        return node -> getCount();
    }

    void erase(string &word){
        Node* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node -> containsKey(word[i])){
                return;
            }
            node = node -> get(word[i]);
            node -> decreaseCount();
        }
        node -> decreaseEnd();
    }
};
