class Solution {
public:
    //First reverse the Linked List and then perform regular next greater element to the right technique using stack
    ListNode* reverse(ListNode* head){
        ListNode* current = head;
        ListNode* after = head;
        ListNode* prev = NULL;
        while(current!=NULL){
            after = current->next;
            current->next = prev;
            prev = current;
            current = after;
        }
        return prev;
    }
    vector<int> nextLargerNodes(ListNode* head) {
        head = reverse(head);
        vector<int> ans;
        stack<int> s;
        ListNode* temp = head;
        while(temp!=NULL){
            if(s.empty()){
                ans.push_back(0);
                s.push(temp->val);
            }else if(!s.empty() && s.top()>temp->val){
                ans.push_back(s.top());
                s.push(temp->val);
            }else{
                while(!s.empty() && s.top()<=temp->val){
                    s.pop();
                }
                if(s.empty()){
                    ans.push_back(0);
                    s.push(temp->val);
                }else if(!s.empty() && s.top()>temp->val){
                    ans.push_back(s.top());
                    s.push(temp->val);
                }
            }
            temp = temp->next;
        }
        std::reverse(ans.begin(),ans.end());
        return ans;
    }
};
