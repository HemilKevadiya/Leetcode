//First, get the XOR of all the elements and traverse through the bits of every element and for every bit that is set in a particular number increase the bitCount by 1 in the setBits array
//In XOR, if the number of set bits are odd then the final bit will be 1, as we have to maximize the set XOR, we need to try to get rid of the even set bits(basically make them odd)
//Note that here, the given operation is just nums[i] ^ x
//The number can only be converted to maximum nums[i]
//So, again traverse through the array, check every set bit of that number and if that set bit's count is even then try to unset that bit by using a mask
//So, after a number is done if the XOR of that element and the current XOR is greater than the total of all elements then the current XOR(which is total_xor in the code) is replaced by that XOR and ans is also replaced by that
//And if the xor is not greater than the current ans then we need to backtrack the current element into the current xor

class Solution {
public:
    int maximumXOR(vector<int>& nums) {
        int total_xor = 0, n = nums.size();
        vector<int> setBits(32);
        for(int i = 0; i < n; i++){
            total_xor ^= nums[i];
            for(int j = 0; j < 32; j++){
                if(nums[i] & (1 << j)){
                    setBits[j]++;
                }
            }
        }
        int ans = total_xor;
        for(int i = 0; i < n; i++){
            total_xor ^= nums[i];
            int curr = nums[i];
            for(int j = 0; j < 32; j++){
                if(curr & (1 << j)){
                    if(setBits[j] % 2 == 0){
                        curr ^= (1 << j);
                        setBits[j]--;
                    }
                }
            }
            if(total_xor ^ curr > ans){
                total_xor ^= curr;
                ans = total_xor;
            }else{
                total_xor ^= nums[i];
            }
        }
        return ans;
    }
};
