//Watch NeetCode's Explanation Video

class Solution {
public:
    int solve(int m, int n, int i, int j, vector<vector<char>>& matrix, vector<vector<int>>& dp){
        if(i >= m || j >= n) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        dp[i][j] = 0;
        int down = solve(m, n, i + 1, j, matrix, dp);
        int right = solve(m ,n, i, j + 1, matrix, dp);
        int diagonal = solve(m, n, i + 1, j + 1, matrix, dp);
        
        if(matrix[i][j] == '1'){
            dp[i][j] = 1 + min({down,right,diagonal});
        }
        
        return dp[i][j];
    }
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int> (n, -1));
        solve(m, n, 0, 0, matrix, dp);
        int ans = INT_MIN;
        for(auto j:dp){
            for(auto i:j){
                ans = max(ans, i);
            }
        }
        return ans * ans;
    }
};
