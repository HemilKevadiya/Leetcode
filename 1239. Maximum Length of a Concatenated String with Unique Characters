class Solution {
public:
    //First, we need to check if the concatenation of two strings is valid or not
    //We can do that by making sets for the strings
    bool isValid(string s1, string s2){
        unordered_set<char> m1;
        for(auto j:s1) m1.insert(j);
        unordered_set<char> m2;
        for(auto j:s2) m2.insert(j);
        for(auto j:m1){
            if(m2.find(j)!=m2.end()) return false;
        }
        if(m1.size()!=s1.length() || m2.size()!=s2.length()) return false;
        return true;
    }
    int maxLen;
    void solve(int idx, vector<string>& arr, int n, string ans){
        //If at any point we have exhausted the strings, we assign the current string's length to max and then check for other possibilities
        if(idx==n){
            int temp = ans.length();
            maxLen = max(maxLen, temp); 
            return;
        } 
        for(int i = idx; i<n; i++){
            if(isValid(ans, arr[i])){
                solve(i+1, arr, n, ans + arr[i]);
            }else{
                int temp = ans.length();
                maxLen = max(maxLen, temp);
                //If the concatenation is not valid, it means we have to keep the track of the current concatenated string's length
            }
        }
    }
    int maxLength(vector<string>& arr) {
        if(arr.size()==1) {
            for(int i=0;i<arr[0].size()-1;i++){
                if(arr[0][i]==arr[0][i+1]) return 0;
            }
            return arr[0].size();
        }
        string ans;
        solve(0, arr, arr.size(), ans);
        return maxLen;
    }
};
