class Solution {
public:
    //We use a combination of backtracking and DFS here
    //Explore all the paths possible from any gold containing cell and do it for every gold containing cell
    int maxAns;
    void DFS(vector<vector<int>>& visited, vector<vector<int>>& grid, int i, int j, int m, int n,int& gold){
        if(i-1>=0 && !visited[i-1][j] && grid[i-1][j]){
            visited[i-1][j] = 1;
            gold+=grid[i-1][j];
            DFS(visited, grid, i-1, j, m, n, gold);
            visited[i-1][j] = 0;
            gold-=grid[i-1][j];
        }
        if(i+1<m && !visited[i+1][j] && grid[i+1][j]){
            visited[i+1][j] = 1;
            gold+=grid[i+1][j];
            DFS(visited, grid, i+1, j, m, n, gold);
            visited[i+1][j] = 0;
            gold-=grid[i+1][j];
        }
        if(j-1>=0 && !visited[i][j-1] && grid[i][j-1]){
            visited[i][j-1] = 1;
            gold+=grid[i][j-1];
            DFS(visited, grid, i, j-1, m, n, gold);
            visited[i][j-1] = 0;
            gold-=grid[i][j-1];
        }
        if(j+1<n && !visited[i][j+1] && grid[i][j+1]){
            visited[i][j+1] = 1;
            gold+=grid[i][j+1];
            DFS(visited, grid, i, j+1, m, n, gold);
            visited[i][j+1] = 0;
            gold-=grid[i][j+1];
        }
        maxAns = max(maxAns,gold);
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int> (n));
        int gold = 0;
        int maxGold = INT_MIN;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]>0){
                    visited[i][j] = 1;
                    gold = grid[i][j];
                    DFS(visited,grid,i,j,m,n,gold);
                    visited[i][j] = 0;
                }
            }
        }
        return maxAns;
    }
};
