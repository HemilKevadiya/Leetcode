bool comp(const vector<int>& a, vector<int>& b){
    if(a[0] == b[0]){
        return a[1] < b[1];
    }else{
        return a[0] > b[0];
    }
}

//Sort the input in the decreasing order of heights, if the heights are equal then sort it by how many people are in front of it(1st index)
//Then, traverse through it and if we encouter any pair which has more elements on the left of it then it is supposed to be,we swap it till it is on the right index

class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        sort(people.begin(), people.end(), comp);
        int n = people.size();
        for(int i = 1; i < n; i++){
            if(people[i][1] < i){
                int swaps = people[i][1];
                for(int j = i; j > swaps; j--){
                    swap(people[j], people[j - 1]);
                }
            }
        }
        return people;
    }
};
