//If the character at the current indices match then we need to look ahead in both the strings without requiring any operations
//Now, for a mismatch case, we have 3 possibilities, either remove, replace or add a character
//If we add a character then it is logical that the character added must have matched with the current on in the second string, so the second string's ptr is moved and first string' s ptr stays right there
//If we delete a character then it means the character still hasn't matched, so we still need to match it with some character in the first string, so the first string's ptr is moved
//If we replace a character then it is logical like the insert operation that the replaced character must be matching with the current character, as the character is matched in the first string, we move both the pointers
//Now, for the base cases -> if we have exhausted the second string then it means we have to make the first string empty, which means the characters that are left in first string needs to be deleted(number of operations)
//If we have exhausted the first string then it means we have to insert the number of characters that are in the second string into the first string(number of operations)
//If both the strings are exhausted then no operation is required so return 0

class Solution {
    //Recursion + Memo
    int solve(string& word1, string& word2, int i, int j, vector<vector<int>>& dp){
        if(i < 0 && j < 0) return 0;
        if(i < 0) return (j + 1);
        if(j < 0) return (i + 1);
        
        if(dp[i][j] != -1) return dp[i][j];
        if(word1[i] == word2[j]){
            return dp[i][j] = solve(word1, word2, i - 1, j - 1, dp);
        }else{
            int insert = 1 + solve(word1, word2, i, j - 1, dp);
            int del = 1 + solve(word1, word2, i - 1, j, dp);
            int replace = 1 + solve(word1, word2, i - 1, j - 1, dp);
            
            return dp[i][j] = min({insert, del, replace});
        }
    }
public:
    //Tabulation with Space Optimization
    int minDistance(string word1, string word2) {
        int m = word1.length();
        int n = word2.length();
        vector<int> prev(n + 1), curr(n + 1);
        
        for(int i = 0; i <= m; i++){
            for(int j = 0; j <= n; j++){
                if(i == 0 && j == 0){
                    curr[j] = 0;
                }
                else if(i == 0){
                    curr[j] = j;
                }
                else if(j == 0){
                    curr[j] = i;
                }
                else if(word1[i - 1] == word2[j - 1]){
                    curr[j] = prev[j - 1];
                }
                else{
                    curr[j] = min( {1 + prev[j],
                                    1 + curr[j - 1],
                                    1 + prev[j - 1]});
                }
            }
            prev = curr;
        }
        return prev[n];
        // return solve(word1, word2, m - 1, n - 1, dp);
    }
};
