class Solution {
public:
    //We take a deque and store the elements in a decreasing order because the front element at all time will be the current window's max
    //We have to check if the max element is in the bounds of the current window or not
    //If ever any element is out of bounds, it will be the queue's front, so remove it if it is out of bounds
    //For every window, the max will be the front of the queue
    //If any element comes which is greater than any element in the queue, we keep removing them because they will never qualify as that window's maximum
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        for(int i = 0; i < nums.size(); i++){
            if(!dq.empty() && dq.front() == (i-k)) dq.pop_front();
            while(!dq.empty() && nums[dq.back()] < nums[i]) dq.pop_back();
            dq.push_back(i);
            if(i >= k-1) ans.emplace_back(nums[dq.front()]);
        }
        return ans;
    }
};
