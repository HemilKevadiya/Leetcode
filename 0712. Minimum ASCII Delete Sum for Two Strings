//WE just do this like LCS but instead of length, we have to play with the ascii values
//In LCS, we had 2 options to either go with the first string's next char or the second string's next char
//In this, we delete whatever is the minimum of both the characters and assign it to the current index

class Solution {
    int LCS(string& s1, string& s2, int m, int n){
        vector<vector<int>> dp((m + 1), vector<int> (n + 1));
        for(int j = 1; j <= n; j++){
            dp[0][j] = s2[j - 1] + dp[0][j - 1];
        }
        
        for(int i = 1; i <= m; i++){
            dp[i][0] = s1[i - 1] + dp[i - 1][0];
        }
        
        for(int i = 1; i < m + 1; i++){
            for(int j = 1; j < n + 1; j++){
                if(s1[i - 1] == s2[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1];
                }else{
                    dp[i][j] = min(s1[i - 1] + dp[i - 1][j], s2[j - 1] + dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
public:
    int minimumDeleteSum(string s1, string s2) {
        int m = s1.length();
        int n = s2.length();
        
        return LCS(s1, s2, m, n);
    }
};
