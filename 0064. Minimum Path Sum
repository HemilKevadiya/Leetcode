class Solution {
public:
    //DFS approach
    int pathSum = INT_MAX;
    void DFS(vector<vector<int>>& grid, int i, int j, int m, int n, int currSum){
        currSum += grid[i][j];
        if(i == m-1 && j == n-1){
            pathSum = min(pathSum, currSum);
            return;
        }
        
        if(j+1 < n){
            DFS(grid, i, j+1, m, n, currSum);
        }
        
        if(i+1 < m){
            DFS(grid, i+1, j, m, n, currSum);
        }
    }
    //Converted to DP approach
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int> (n));
        for(int i = 0; i< m; i++){
            for(int j = 0;j< n; j++){
                if(i == 0 && j == 0) dp[i][j] = grid[i][j];
                else if(j == 0) dp[i][j] = dp[i-1][j] + grid[i][j];
                else if(i == 0) dp[i][j] = dp[i][j-1] + grid[i][j];
                else dp[i][j] = min(dp[i-1][j] + grid[i][j], dp[i][j-1] + grid[i][j]);
            }
        }
        return dp[m-1][n-1];
    }
};
