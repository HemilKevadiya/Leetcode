class Solution {
public:
    int count;
    int countSubstrings(string s) {
        int count = 0;
        int n = s.length();
        
        //Count odd length substrings that are palindromes first
        //Imagine each character of the string as the middle character of the substring then go as far as you can go to the left and right, while checking for palindrome at every point, if at any point the two characters at pointer i and j are not equal, it means there is no point in going ahead as the substring containing those characters won't stay a palindrome anymore
        //Then do the same for even length substrings
        
        //For Odd
        for(int i=0;i<n;i++){
            int left = i;
            int right = i;
            if(left==right) count++; //The character itself will be a palindrome
            left--; right++;
            while(left>=0 && right<n){
                if(s[left]==s[right]) count++;
                else break;
                left--; right++;
            }
        }
        
        //For Even
        for(int i=0;i<n;i++){
            int left = i;
            int right = i+1;
            while(left>=0 && right<n){
                if(s[left]==s[right]) count++;
                else break;
                left--;
                right++;
            }
        }
        return count;
    }
};
