class Solution {
public:
    //Just Apply Merge Sort
    //If for any element, the given condition is true then it means for all the remaining elements of the array the condition is true because it it sorted and every element after that will always be greater than or equal to that element then we increment the pointer of second array to look out if for any other element the given condition is true or not, if it is not then we increment the pointer of the first array
    int pairs;
    void merge(vector<int>& nums, int low, int mid, int high){
        int i = low, j = mid + 1, k = 0;
        vector<int> temp(high - low + 1);
        while(i<=mid && j<=high){
            if(nums[i] > 2 * (long long)nums[j]){
                j++;
                pairs += (mid - i + 1);
            }else{
                i++;
            }
        }
        i = low, j = mid + 1;
        
        while(i<=mid && j<=high){
            if(nums[i] > nums[j]){
                temp[k++] = nums[j++];
            }else{
                temp[k++] = nums[i++];
            }
        }
        
        while(i<=mid){
            temp[k++] = nums[i++];
        }
        
        while(j<=high){
            temp[k++] = nums[j++];
        }
        
        for(int i = low; i <= high; i++){
            nums[i] = temp[i - low];
        }
        
    }
    void mergeSort(vector<int>& nums, int low, int high){
        if(low < high){
            int mid = (low + high)/2;
            mergeSort(nums, low, mid);
            mergeSort(nums, mid + 1, high);
            merge(nums, low, mid, high);
        }
    }
    int reversePairs(vector<int>& nums) {
        mergeSort(nums, 0, nums.size() - 1);
        return pairs;
    }
};
